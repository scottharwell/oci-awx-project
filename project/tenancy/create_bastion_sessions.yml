---
- name: Create Bastion Sessions
  hosts: localhost
  gather_facts: false
  vars:
    connections: []
  tasks:
    - name: Verify SSH env var is set
      fail:
        msg: "OCI_SSH_KEY_FILE is not set"
      when: lookup('env', 'OCI_SSH_KEY_FILE') is undefined or lookup('env', 'OCI_SSH_KEY_FILE') == ""
    - name: Get Ansible bastion
      oracle.oci.oci_bastion_facts:
        compartment_id: "{{ oci_compartment_id }}"
        bastion_lifecycle_state: ACTIVE
      register: bastion_facts
    # - name: Debug Bastions
    #   debug:
    #     var: bastion_facts
    - name: Get Ansible bastion OCID
      set_fact:
        bastion_ocid: "{{ bastion_facts | json_query('bastions[?lifecycle_state==`ACTIVE` && freeform_tags.deployment==`ansible`].id | [0]') }}"
        cacheable: false
    # - name: Debug Bastion OCID
    #   debug:
    #     var: bastion_ocid
    - name: Get connected host facts
      oracle.oci.oci_compute_instance_facts:
        compartment_id: "{{ oci_compartment_id }}"
        lifecycle_state: "RUNNING"
      register: compute_facts
    # - name: Debug instances
    #   debug:
    #     var: compute_facts
    - name: Get instance private ip
      set_fact:
        instances: "{{ compute_facts | json_query('instances[?primary_public_ip==`null` && !(contains(display_name,`oke-`))]') }}"
    # - name: Debug instance private IPs
    #   debug:
    #     var: instances
    - name: Create sessions
      oracle.oci.oci_bastion_session:
        bastion_id: "{{ bastion_ocid }}"
        display_name: "session-{{ item.display_name }}"
        target_resource_details:
          session_type: MANAGED_SSH
          target_resource_operating_system_user_name: "{{ target_user_name }}"
          target_resource_id: "{{ item.id }}"
          target_resource_port: "{{ target_resource_port }}"
          target_resource_private_ip_address: "{{ item.primary_private_ip }}"
        key_details:
          public_key_content: "{{ public_key }}"
        # display_name: display_name_example
        # key_type: PUB
        session_ttl_in_seconds: 1800
      register: bastion_sessions
      with_items: "{{ instances }}"
      when: bastion_ocid is defined and instances is defined and (instances | length > 0)
    - name: Set session details
      set_fact:
        connections: "{{ connections + [ session ] }}"
      vars:
        session: |
          {
            'primary_private_ip': '{{ item.item.primary_private_ip }}',
            'proxy_command': '{{ (item.session.ssh_metadata.command | regex_replace("<privateKey>", lookup('env', 'OCI_SSH_KEY_FILE')) | regex_search('ProxyCommand=\"(.*)\"', ignorecase=True) | regex_replace('ProxyCommand=\"(.*)\"','ProxyCommand=\"\1 -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null\"', ignorecase=True)) }}'
          }
      with_items: "{{ bastion_sessions.results }}"
    - name: Debug connections
      debug:
        var: connections
    - name: Add bastion host to inventory
      add_host:
        hostname: "{{ item.primary_private_ip }}"
        ansible_connection: ssh
        ansible_ssh_common_args: "-o {{ item.proxy_command }}"
        ansible_user: "{{ target_user_name }}"
        groups:
          - all_hosts
          - bastions
      with_items: "{{ connections }}"
